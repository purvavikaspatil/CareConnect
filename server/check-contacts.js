require('dotenv').config();
const mongoose = require('mongoose');
const Contact = require('./models/Contact');
const User = require('./models/User');

console.log('üîç CHECKING EMERGENCY CONTACTS\n');
console.log('‚ïê'.repeat(60));

async function checkContacts() {
  try {
    console.log('\n‚è≥ Connecting to MongoDB...');
    await mongoose.connect(process.env.MONGODB_URI);
    console.log('‚úÖ MongoDB connected\n');

    // Get all users
    const users = await User.find({});
    console.log(`Found ${users.length} user(s) in database\n`);

    for (const user of users) {
      console.log('‚îÄ'.repeat(60));
      console.log(`\nüë§ USER: ${user.name}`);
      console.log(`   Email: ${user.email}`);
      console.log(`   ID: ${user._id}`);

      // Get contacts for this user
      const contacts = await Contact.find({ userId: user._id });
      console.log(`\n   üìã Emergency Contacts: ${contacts.length}`);

      if (contacts.length === 0) {
        console.log('\n   ‚ö†Ô∏è  NO CONTACTS FOUND!');
        console.log('   üí° Add contacts at: http://localhost:5173/contacts\n');
        continue;
      }

      contacts.forEach((contact, index) => {
        console.log(`\n   Contact ${index + 1}:`);
        console.log(`   ‚îú‚îÄ Name: ${contact.name}`);
        console.log(`   ‚îú‚îÄ Relation: ${contact.relation || 'N/A'}`);
        console.log(`   ‚îú‚îÄ Phone: ${contact.phone || '‚ùå NOT PROVIDED'}`);
        console.log(`   ‚îî‚îÄ Email: ${contact.email || '‚ùå NOT PROVIDED'}`);

        // Validate phone format
        if (contact.phone) {
          if (contact.phone.startsWith('+91')) {
            // Check if it's one of the verified numbers
            const verifiedNumbers = [
              '+918529596981',
              '+919646787567',
              '+917499461772',
              '+919145291452',
              '+918530976939'
            ];
            
            const isVerified = verifiedNumbers.includes(contact.phone);
            if (isVerified) {
              console.log(`      ‚úÖ Phone format correct and VERIFIED in Twilio`);
            } else {
              console.log(`      ‚ö†Ô∏è  Phone format OK but NOT VERIFIED in Twilio`);
              console.log(`      üí° Verify this number in Twilio Console`);
            }
          } else {
            console.log(`      ‚ùå INVALID FORMAT! Must start with +91`);
            console.log(`      üí° Update to: +91${contact.phone.replace(/^0+/, '')}`);
          }
        } else {
          console.log(`      ‚ùå No phone number - SMS won't be sent`);
        }
      });

      console.log('\n   üìä Summary:');
      const withPhone = contacts.filter(c => c.phone && c.phone.trim() !== '');
      const withEmail = contacts.filter(c => c.email && c.email.trim() !== '');
      const withValidPhone = contacts.filter(c => c.phone && c.phone.startsWith('+91'));
      
      console.log(`   ‚îú‚îÄ With phone: ${withPhone.length}`);
      console.log(`   ‚îú‚îÄ With email: ${withEmail.length}`);
      console.log(`   ‚îî‚îÄ With valid phone format (+91): ${withValidPhone.length}`);

      if (withValidPhone.length === 0) {
        console.log(`\n   ‚ö†Ô∏è  WARNING: No contacts with valid phone numbers!`);
        console.log(`   üí° SMS alerts will NOT be sent until you add valid phone numbers`);
      }
    }

    console.log('\n' + '‚ïê'.repeat(60));
    console.log('\n‚úÖ DIAGNOSIS COMPLETE\n');

    console.log('üí° NEXT STEPS:\n');
    console.log('1. Go to: http://localhost:5173/contacts');
    console.log('2. Edit each contact');
    console.log('3. Update phone to one of your verified numbers:');
    console.log('   ‚Ä¢ +918529596981');
    console.log('   ‚Ä¢ +919646787567');
    console.log('   ‚Ä¢ +917499461772');
    console.log('   ‚Ä¢ +919145291452');
    console.log('   ‚Ä¢ +918530976939');
    console.log('4. Save the contact');
    console.log('5. Trigger SOS again\n');

    await mongoose.connection.close();
    process.exit(0);
  } catch (error) {
    console.error('\n‚ùå ERROR:', error.message);
    if (mongoose.connection.readyState === 1) {
      await mongoose.connection.close();
    }
    process.exit(1);
  }
}

checkContacts();

